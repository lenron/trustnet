<!DOCTYPE HTML>
<html>
<meta content="text/html;charset=utf-8" http-equiv="Content-Type" />
<meta content="utf-8" http-equiv="encoding" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<head>
<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Orbitron:wght@400..900&display=swap" rel="stylesheet">
</head>
<style>

	* {
	  font-family: "Orbitron", serif;
	  font-optical-sizing: auto;
	  font-weight: 600;
	  font-style: normal;
	}

	html {
		background-color: #272727;
/*		position: fixed;
		display: flex;
		flex-direction: column;
		height: 100%;
		width: 100%;
*/
	}

	body {
		display: flex;
		flex-direction: column;
		min-height: 100vh;
		margin: 0;
		padding: 0;
		/*justify-content: center;
		align-items: center;
		position: relative;*/
	}

	.header {
		display: flex;
		flex-direction: row;
		justify-content: space-between;
		align-items: center;
		color: #54c597;
		padding: 4px;
		padding-right: 10px;
		padding-left: 10px;
	}

	.header_content {
		display: flex;
	}

	.header_title {

	}

	.header_label {
		padding: 8px;
	}

	.center_html {
		width: 100%;
		background-color: #272727;
		flex: 1 auto;
		display: flex;
		/*align-self: center;*/
	}

	.content_html {
		width: 100%;
		display: flex;
		/*align-items: baseline;*/
		justify-content: center;
	}

	/* generated conetent */
	.gen {
		width: 700px;
		margin: 10px;
		align-self: center;
		display: flex;
		flex-direction: column;
		justify-content: center; 
		color: #54c597;
	}

	/* obf button */
	button {
		/*width: 400px;*/
		height: 65px;
		background-color: #434343;
		border: 2px solid;
		padding: 2px;
		margin: 8px;
		padding-right: 10px;
		padding-left: 10px;
		color: #54c597;
		border-color: #54c597;
		font-size: 17px;
		border-radius: 15px;
	}

	input {
		height: 80px;
		width: 95%;
		background-color: #272727;
		border: 2px solid;
		padding: 8px;
		margin: 8px;
		border-color: #54c597;
		color: #54c597;
		font-size: 25px;
		border-radius: 20px;
	}

	textarea {
		/*width: 600px;*/
		width: 95%;
		height: 150px;
		background-color: #272727;
		border: 2px solid;
		padding: 12px;
		margin: 8px;
		border-color: #54c597;
		color: #54c597;
		font-size: 25px;
		border-radius: 30px;
	}

	.deletecheck {
		justify-content:center;
		align-items:center;
		z-index:10;
		position:absolute;
		width:100%;
		height:200%;
		display:none;
		background-color:gray;
		padding:8px;
		margin-left:0;
		margin-top:-40%;
		flex-direction: column;
		border:2px solid;
		border-color:red; 
		border-radius:30px;
	}

	/* Set minimum page Width to */
	@media screen and (max-width: 340px){ html,body {min-width: 340px} }

	/* Set minimum page Height to 400*/
	@media screen and (max-height: 400px){ html,body {min-height: 400px} }	

	/* Responsive Design: When the viewport is fewer than 600px wide, activate the following CSS. */
	@media screen and (max-width:700px) {

		input {
			width: 90%;
		}

		textarea {
			width: 90%;
		}

		.header {
			flex-direction: column;
		}

		.home button {
			width: 200px;
			/*border-color: black;*/
		}

		.home_buttons {
			/*flex-direction: column;*/
		}

		.choose button {
			font-size: 14px;
		}

		.upload input {
			font-size: 16px;
		}

		.deletecheck {
			margin-top: -50%;
			height: 220%;
		}
		
		.content_html {
			margin-top: -100px;
		}
	}
	@media screen and (max-width:500px) {
/*
		input {
			width: 400px;
		}

		textarea {
			width: 400px;
		}
*/
		.home button {
			width: 150px;
			font-size: 14px;
			/*border-color: black;*/
		}

		.deletecheck {
			width: 95%;
			margin-top: -75%;
			height:250%;
		}
	}



</style>
<body>

	<div class="header" id="header">
		<div class="header_content" id="header_left">
			<div class="header_title">
				<h1 id="titletext">SECRETWORD</h1>
			</div>
		</div>
		<div class="header_content" id="header_right">
			<div class="header_label" style="">
				<label id="howworks">HOW IT WORKS</label>
			</div>
			<div class="header_label" style="">
				<label id="faq">FAQ</label>
			</div>
		</div>
	</div>
	<div class="center_html" id="center_html">
		<div class="content_html" id="content_html">

			<TMPL_VAR NAME=htmlblock>

		</div>
	</div>

</body>
<script src="base58.js"></script>
<script>

	// Set Title to link to Home.
	document.getElementById("titletext").onclick = function() {
		location.href = "https://chat.dance/obf";
	}
	// later
	document.getElementById("howworks").onclick = function() {
		location.href = "https://chat.dance/obf/how";
		// howworks();
	}
	// later
	document.getElementById("faq").onclick = function() {
		location.href = "https://chat.dance/obf/faq";
		// faq();
	}
	
	// global flag
	let upload_flag = 'false';

// Thread walk handler functions
	// show target pane in page set
	// target is element ID of html generated pane
	function showPage(target){
		let generated_html_pages;
		// fill generated_html_pages with set of objects including generated html
		generated_html_pages = document.getElementsByClassName('gen');
		// hide all generated_html_pages
		for (let i = 0; i < generated_html_pages.length; i++) {
			generated_html_pages[i].style.display = "none";
		}
		// show target 
		document.getElementById(target).style.display = "flex";
		// focus input or textbox
		let inputs_array = document.getElementById(target).getElementsByTagName('input');
		let textareas_array = document.getElementById(target).getElementsByTagName('textarea');
		// There is only 1 input or 1 textarea per div in our setup.
		// If we found more than zero inputs in the array, focus the first and only one.
		if( inputs_array.length > 0 ){
			inputs_array[0].focus();
		// Otherwise, we should find 1 textarea to focus if we need to focus anything.
		}
/*
else if( textareas_array.length > 0 ){
			textareas_array[0].focus();
		}
*/
	}

	// needed because of upload_flag functionality
	function storeDefault(){
		upload_flag = 'false';
		showPage('store2');
	}

	// needed because of upload_flag functionality
	function storeUpload(){
		console.log("set upload_flag: true");
		upload_flag = 'true';
		showPage('store_upload');
	}

	// needed because of upload_flag functionality
	function storeBack(){
		if( upload_flag === 'true' ){
			showPage('store_upload');
		}else{
			showPage('store3');
		}
	}

	// Store thread walk finisher.
	// async needed to handle crypto functionality
	async function storeExecute(){
		document.querySelectorAll(".store.five").forEach(a=>a.style.display = "none");

		// Main Function Call
		let outcome = await deepStore();

		if( outcome == 1 ){	//Success
			document.querySelectorAll(".store.six").forEach(a=>a.style.display = "flex");
		}else{	//Fail
			document.querySelectorAll(".store.seven").forEach(a=>a.style.display = "flex");
		}
	}
	// clear sensitive data / reload page for security?

	// Load thread walk finisher.
	function loadExecute(){
		// Main Function Call
		deepLoad();
		showPage('load5');
	}

	function deleteCheckShow(){
		// Show Overlay
		document.getElementById("overlay").style.display = "flex";
	}

	function deleteCheckHide(){
		// Show Overlay
		document.getElementById("overlay").style.display = "none";
	}

	// Delete thread walk finisher.
	function deleteExecute(){
		// Main Function Call
		deepDelete();
		// Notify user of success
		showPage('delete5');
		// Return Home
		//location.href = "https://chat.dance/obf";
	}

/*
  document.getElementById('binaryInput').addEventListener('change', async function(event) {
    const file = event.target.files[0];
    const reader = new FileReader();
    reader.onload = function(e) {
	  let buffer = e.target.result;
      // Process the binary data
      const info = `Buffer Length: ${buffer.byteLength} bytes`;
      document.getElementById('binaryOutput').innerHTML = info;
		buffer = new Uint8Array(buffer);
		let arr = bytesToBase64(buffer);
      console.log(arr);
      console.log("arr: " + arr);
    };
    reader.readAsArrayBuffer(file);
    
  });
*/

	// Catch File Ingest
	// listener is placed inline of the html
	async function catchUpload(event){
		const file = event.target.files[0];
		const reader = new FileReader();
		reader.readAsArrayBuffer(file);

		reader.onload = function(e){
			let buffer = e.target.result;
			buffer = new Uint8Array(buffer);
			let filedata = bytesToBase64(buffer);
			console.log("uploaded file content:");
			console.log(filedata);
			// Input Data Length Check
			if( checkInputLength(filedata) ){
				// Data Length within parameters
				document.getElementById("upload_data").value = filedata;
				document.querySelectorAll(".store.upload").forEach(a=>a.style.display = "none");
				// skip data and pass1 input screens
				document.querySelectorAll(".store.four").forEach(a=>a.style.display = "flex");
				// for back functionality, we need a button to continue
				document.getElementById("store_upload_continue").style.display = "inline";
				document.getElementById("store_upload_input").style.border = "";
				// add red warning text
				document.getElementById("store_upload_warning").style.display = "none";
			}else{
				// Data Length too long! Show Warning.
				// hide continue button
				document.getElementById("store_upload_continue").style.display = "none";
				// make border red
				document.getElementById("store_upload_input").style.border = "thick solid red";
				// add red warning text
				document.getElementById("store_upload_warning").style.display = "inline";
			}
		}
	}

	// on change check the length of the text area
	function checkTextInputLength(){
		let input = document.getElementById("store_data").value;
		if( checkInputLength(input) ){
			// Length OK, turn off warning
			document.getElementById("store_text_input_warning").style.display = "none";
			// display button
			document.getElementById("store_text_input_continue").style.display = "inline";
		}else{
			// remove button
			document.getElementById("store_text_input_continue").style.display = "none";
			// Length NOT OK, turn ON warning
			document.getElementById("store_text_input_warning").style.display = "inline";
		}
	}

	// Catch Enter on each page
	// input.addEventListener(type, listener)
	// .addEventListener('keydown', catchEnter);	or
	// onkeydown = catchEnter()
	function catchEnter(e){
		console.log("keydown event key: " + e.key);
		console.log("this target: " + e.target.id);
		if( e.key == 'Enter'){
			console.log("caught");
			// e.target.id is the ID of the div of the origin of the catchEnter function call.
			if( e.target.id == "store_codeword"){
				showPage('store_choose');
			}else if(e.target.id == "store_pass_1"){
				showPage('store4');
			}else if(e.target.id == "store_pass_2"){
				showPage('store5');
/*			}else if(e.target.id == "store_pass_3"){
				storeFive();
*/
			}else if(e.target.id == "load_codeword"){
				showPage('load2');
			}else if(e.target.id == "load_pass_1"){
				showPage('load3');
			}else if(e.target.id == "load_pass_2"){
				showPage('load4');
			}else if(e.target.id == "load_pass_3"){
				loadExecute();
			}else if(e.target.id == "delete_codeword"){
				showPage('delete2');
			}else if(e.target.id == "delete_pass_1"){
				showPage('delete3');
			}else if(e.target.id == "delete_pass_2"){
				showPage('delete4');
			}else if(e.target.id == "delete_pass_3"){
				deleteExecute();
			}
		}
	}


////////////////////////////////////////////
//////		Begin Merge 	////////////////
////////////////////////////////////////////

// Base 58 character map.
const base58map = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz";

	async function encryptDouble(file_ingest_input, pass2, pass3){
		// Obfuscation Step 1 Encrypt
		const obf_s1_encrypted = await obf1Encrypt(file_ingest_input, pass2);
		// Obfuscation Step 2 Encrypt
		const obf_s2_encrypted = await obf2Encrypt(obf_s1_encrypted, pass3);
		return obf_s2_encrypted;
	}//encryptStack()

	async function encryptStack(plaintext, pass1, pass2, pass3){
		// OpenSSL Encrypt (base 64 encoded)
		const openssl_encrypted = await encOpenSSL(plaintext, pass1);
		// Obfuscation Step 1 Encrypt
		const obf_s1_encrypted = await obf1Encrypt(openssl_encrypted, pass2);
		// Obfuscation Step 2 Encrypt
		const obf_s2_encrypted = await obf2Encrypt(obf_s1_encrypted, pass3);
		return obf_s2_encrypted;
	}//encryptStack()

	async function decryptDouble(encrypted, pass2, pass3){
		const obf2_decrypted = await obf2Decrypt(encrypted, pass3);
		const obf1_decrypted = await obf1Decrypt(obf2_decrypted, pass2);
		return obf1_decrypted;
	}//decryptStack()

	async function decryptStack(encrypted, pass1, pass2, pass3){
		const obf2_decrypted = await obf2Decrypt(encrypted, pass3);
		const obf1_decrypted = await obf1Decrypt(obf2_decrypted, pass2);
		const plaintext = await decOpenSSL(obf1_decrypted, pass1);
		return plaintext;
	}//decryptStack()

	async function deepStore(){

		// Get save data from user.
		const plaintext = document.getElementById("store_data").value;
		const uploadtext = document.getElementById("upload_data").value;
		// Get code/passwords from user.
		const codeword = document.getElementById("store_codeword").value;
		const pass_1 = document.getElementById("store_pass_1").value;
		const pass_2 = document.getElementById("store_pass_2").value;
		const pass_3 = document.getElementById("store_pass_3").value;
/*
		// Make sure data isn't blank, and mandate that all 3 pw's are used in addition to the cw.
		if( plaintext === '' || codeword === '' || pass_1 === '' || pass_2 === '' || pass_3 === '' ){
			//addStatus("To proceed, please make sure no fields are blank.\n");
			throw new Error('Empty fields found! Ending.');
		}
*/

	
		let encrypted_data;
		let upload_flag_db;
		// Use flag set by storeUpload() to determine which enc stack to use.
		if( upload_flag == 'true' ){
			// Grab upload_flag value for server database flag.
			upload_flag_db = '1';
			// Double Encrypt
			encrypted_data = await encryptDouble(uploadtext, pass_2, pass_3);
			// reset flag once it is used
			console.log("set upload_flag: false");
			upload_flag = 'false';
		}else{
			upload_flag_db = '0';
			// Triple Encrypt
			encrypted_data = await encryptStack(plaintext, pass_1, pass_2, pass_3);
		}

/*
Don't think this is in spec


			// Check Decrypt
			const check_decrypt = await decryptStack(encrypted_data, pass_1, pass_2, pass_3);
			if( plaintext == check_decrypt ){
				//addStatus("Encrypted data integrity verified.\n");
			}else{
				console.log("plaintext: ~" + plaintext + "~");
				console.log("decrypted: ~" + check_decrypt + "~");
				//addStatus("Unable to properly extract input data from encrypted! FAIL.\n");
			} 
*/

		// Compute Fingerprint
		const fp_hex = await computeFingerprint(codeword, pass_2, pass_3);
		console.log("fingerprint hex: " + fp_hex);
		console.log("fingerprint length: " + fp_hex.length);
		// fingerprint length check
		if( fp_hex.length != 64 ){
			//addStatus("Fingerprint length problem! Ending.\n");
			throw new Error('Fingerprint length INVALID!');
		}

		// Use fetch() for server communication
		const server_response = await serverStore(fp_hex, encrypted_data, upload_flag_db);
		sr_store_result = server_response.response;
		console.log("Server Response from STORE: " + "~" + sr_store_result + "~");
		console.log(server_response);
		// Store returned 0 (fail).
		if( Number(sr_store_result)  != 1){
			//addStatus("There was a problem storing the data! End.\n\n");
			throw new Error('STORE ERROR!');
		}

		// Check Load
		// return of 0 means fingerprint form check fails
		// return of empty means fingerprint returned nothing
		const sr_load = await serverLoad(fp_hex);
		console.log("Server Response from LOAD (store final check): " + "~" + sr_load.data + "~");
		console.log(sr_load);

		// Report Results
		if( encrypted_data  === sr_load.data){
			return 1;
			//addStatus("Data successfully saved to server.\n\n");
		}else{
			return 0;
			//addStatus("Data failed to save to server!\n\n");
			// Maybe delete the record (once I write that sub) if it fails to load correctly?????
		}

	}//deepStore()


	async function deepLoad(){

		// Get code/passwords from user.
		const codeword = document.getElementById("load_codeword").value;
		const pass_1 = document.getElementById("load_pass_1").value;
		const pass_2 = document.getElementById("load_pass_2").value;
		const pass_3 = document.getElementById("load_pass_3").value;
		console.log("code:"+codeword+" p1:"+pass_1+" p2:"+pass_2+" p3:"+pass_3);

		// Compute Fingerprint
		const fp_hex = await computeFingerprint(codeword, pass_2, pass_3);
		console.log("fingerprint hex: " + fp_hex);
		console.log("fingerprint length: " + fp_hex.length);
		// fingerprint length check
		if( fp_hex.length != 64 ){
			//addStatus("Fingerprint length problem! Ending.\n");
			throw new Error('Fingerprint length INVALID!');
		}

		// Load from server
		const sr_load = await serverLoad(fp_hex);
//		console.log("Server Response from LOAD: " + "~" + sr_load.response + "~");
		console.log("Access Server Response, data: " + sr_load.data + "\n" + "upload_flag: " + sr_load.upload_flag);
		console.log(sr_load);
		if( sr_load.data == '' ){
			//addLoadStatus("Nothing Found.");
			return;
		}

		// Grab upload flag from server.
		const upload_flag_server = sr_load.upload_flag;
		console.log("UPLOAD FLAG: " + upload_flag_server);
/*
		// Triple Decrypt
		const decrypted = await decryptStack(sr_load.data , pass_1, pass_2, pass_3);
		console.log("decrypted: " + decrypted);
		// Report Results 
		document.getElementById("output_display").value = decrypted;
*/
		// Your Encryption
		if( upload_flag_server == '1' ){
			// Double Decrypt
			decrypted_data = await decryptDouble(sr_load.data, pass_2, pass_3);
			//let output_data = base64ToWords(decrypted_data);
			const bytes = base64ToBytes( decrypted_data );
			//let blob = new Blob([output_data], {'type':'text/plain'});
			let blob = new Blob([bytes]);

			let a = document.createElement('a');
			a.href = window.URL.createObjectURL(blob);
			a.download = 'secretword_output_file.txt';
			a.click();
			document.getElementById("output_display").placeholder = "<file should automatically download>";
		}else{ // Our Encryption
			// Triple Decrypt
			const decrypted = await decryptStack(sr_load.data , pass_1, pass_2, pass_3);
			//console.log("decrypted: " + decrypted);
			// Report Results 
			document.getElementById("output_display").value = decrypted;
		}
	}//deepLoad()

	function base64ToWords( data64 ){
		const bytes = base64ToBytes( data64 );
		const bytearray = new Uint8Array( bytes );
		const dec = new TextDecoder();
		return dec.decode( bytearray );
	}

	async function deepDelete(){
/*									Keeping Delete Thread code for now.
		const codeword = document.getElementById("delete_codeword").value;
		const pass_1 = document.getElementById("delete_pass_1").value;
		const pass_2 = document.getElementById("delete_pass_2").value;
		const pass_3 = document.getElementById("delete_pass_3").value;			*/
		// Get code/passwords from user.
		// For Delete, we will now be in the Access thread and should be able to use already entered values.
		const codeword = document.getElementById("load_codeword").value;
		const pass_1 = document.getElementById("load_pass_1").value;
		const pass_2 = document.getElementById("load_pass_2").value;
		const pass_3 = document.getElementById("load_pass_3").value;
		console.log("DELETE code:"+codeword+" p1:"+pass_1+" p2:"+pass_2+" p3:"+pass_3);

		// Compute Fingerprint
		const fp_hex = await computeFingerprint(codeword, pass_2, pass_3);
		console.log("fingerprint hex: " + fp_hex);
		console.log("fingerprint length: " + fp_hex.length);
		// fingerprint length check
		if( fp_hex.length != 64 ){
			//addStatus("Fingerprint length problem! Ending.\n");
			throw new Error('Fingerprint length INVALID!');
		}

		// Load from server
		const sr_delete = await serverDelete(fp_hex);

		return sr_delete.response;
	}//deepLoad()

/*
	function addStatus( msg ){
			document.getElementById("status_display_store").value += msg;
	}//addStatus()

	function addLoadStatus( msg ){
			document.getElementById("status_display_load").value += msg;
	}//addLoadStatus()
*/
	// Server communication function. Endpoint exeload will attempt to load
	// encrypted data corresponding to the input fingerprint.
	async function serverLoad(fingerprint){
		const SERVER_URL = '/obf/exeload';
		
		console.log("Attempting Server Load with\nFingerprint: " + fingerprint); 
		const response = await fetch(SERVER_URL, {
			method: 'POST',
			headers: {
				'Content-Type': 'text/html',
			},
			body: JSON.stringify({
				fingerprint: fingerprint,
			}),
		})
		return response.json()
	}//serverLoad()

	// Server communication function. Endpoint exestore will attempt to store 
	// input encrypted data at the input fingerprint location.
	async function serverStore(fingerprint, data, upload_flag_db){
		const SERVER_URL = '/obf/exestore';
		
		console.log("Attempting Server Store.\nFingerprint: " + fingerprint + "\nData: " + data + "\nUpload Flag: " + upload_flag_db + "\n");
		const response = await fetch(SERVER_URL, {
			method: 'POST',
			headers: {
				'Content-Type': 'text/html',
			},
			body: JSON.stringify({
				fingerprint: fingerprint,
				data: data,
				upload_flag: upload_flag_db,  // Usually I like to make sure these are identical.
			}),
		})
		return response.json()
	}//serverStore()

	// Endpoint exedelete will attempt to delete
	async function serverDelete(fingerprint){
		const SERVER_URL = '/obf/exedelete';
		
		console.log("Attempting Server Delete with\nFingerprint: " + fingerprint); 
		const response = await fetch(SERVER_URL, {
			method: 'POST',
			headers: {
				'Content-Type': 'text/html',
			},
			body: JSON.stringify({
				fingerprint: fingerprint,
			}),
		})
		return response.json()
	}//serverDelete()

	async function computeFingerprint(codeword, pass_2, pass_3){
		// sub all lowercase
		const cw_lower = codeword.toLowerCase();
		// take sha256 hash of codeword, pass 2, pass 3
		const enc = new TextEncoder();
		const cw_buf = enc.encode(cw_lower);
		const p2_buf = enc.encode(pass_2);
		const p3_buf = enc.encode(pass_3);
		const cw_hash = await crypto.subtle.digest('SHA-256', cw_buf);
		const p2_hash = await crypto.subtle.digest('SHA-256', p2_buf);
		const p3_hash = await crypto.subtle.digest('SHA-256', p3_buf);
		// concatenate: fingerprint = cw_hash + p2_hash + p3_hash;
		const cw_and_p2_hash = concatBuffer(cw_hash, p2_hash)
		const concatenated_hashes = concatBuffer(cw_and_p2_hash, p3_hash)
		const fp_hash = await crypto.subtle.digest('SHA-256', concatenated_hashes);
		const fingerprint = new Uint8Array(fp_hash);
		//console.log("fingerprint: " + fingerprint);
		const fp_hex = buf2hex(fingerprint);
		return fp_hex;
	}//computeFingerprint

	function getKeyMaterial(password) {
		const enc = new TextEncoder();
		return window.crypto.subtle.importKey(
			"raw",
			enc.encode(password),
			"PBKDF2",
			false,
			["deriveBits", "deriveKey"],
		);
	}//getKeyMaterial()


	async function encOpenSSL(plaintext, pass) {

		// Encode plaintext in utf8 and store in Uint8Array inputbytes.
		const inputbytes = new TextEncoder().encode( plaintext );
		// Make the plaintext look like a file by adding a single newline
		// char to the end of the string.
		const single_newline = new Uint8Array(1);
		single_newline[0] = 10;
		const plaintextbytes_buf = concatBuffer(inputbytes, single_newline);
		// plaintext is now in a form that is ready to give to the encryption function.
		const plaintextbytes = new Uint8Array(plaintextbytes_buf);

		// Generate random salt.
		const salt = window.crypto.getRandomValues(new Uint8Array(8));

		// Prepare inputs for digest.
		const keyMaterial = await getKeyMaterial(pass);
		const iter = 10000;
		const digest_hash = 'SHA-256';

		// Use the key derivation function PBKDF2 to derive bits that will 
		// be used to create the cryptoKey object needed for the main digest.
		const derived_bits = await window.crypto.subtle.deriveBits(
			{
				name: "PBKDF2",
				salt,
				iterations: iter,
				hash: digest_hash,
			},
			keyMaterial,
			384,
		);
		const derivedKeyBuffer = new Uint8Array(derived_bits);

		// OpenSSL derives the key and IV using the same PBKDF2 digest.
		// The first 256 bits are used as key, the last 128 are used for IV.
		const keybytes = derivedKeyBuffer.slice(0, 32);
		const ivbytes = derivedKeyBuffer.slice(32);

		// MDN syntax: importKey(format, keyData, algorithm, extractable, keyUsages)
		let key = await window.crypto.subtle.importKey(
			'raw', 
			keybytes, 
			{
				name: 'AES-CBC', 
				length: 256
			}, 
			false, 
			['encrypt']
		);

		// Main Function Call
		const encrypted_result = await window.crypto.subtle.encrypt({ name: "AES-CBC", iv: ivbytes }, key, plaintextbytes);

		// Copy the output array buffer into a new typed array.
		const cipherbytes = new Uint8Array(encrypted_result);
		// Convert to base64 for the next encryption step.
		const result = bytesToBase64(encrypted_result);

		// Combine constant salt, random salt, and encrypted result as array buffers, then convert to base64.
		// out = Salted__ + <random salt> + <utf8 encoded ciphertext>
		const const_salt = "Salted__";
		const salt64 = new TextEncoder().encode(const_salt);
		const two_salts = concatBuffer(salt64, salt);
		// Merge salts with encoded ciphertext.
		let encrypted_output_buf = concatBuffer(two_salts, cipherbytes);
		encrypted_output_buf = new Uint8Array(encrypted_output_buf);
		let out64 = bytesToBase64(encrypted_output_buf);
		out64 = new Array(out64);

		return out64;
	}//encOpenSSL()

	async function decOpenSSL(ciphertext64, pass) {

		// ciphertext is now in a form that is ready to give to the encryption function.
		const ciphertextby = base64ToBytes(ciphertext64);
		const ciphertextbytes = new Uint8Array(ciphertextby);

		const dec = new TextDecoder();
		const input_string = dec.decode(ciphertextbytes);

		const digest_hash = 'SHA-256';
		const iter = 10000;
		const salta = ciphertextbytes.slice(8,16);
		const salt = new Uint8Array(salta);

		// Prepare inputs for digest.
		const keyMaterial = await getKeyMaterial(pass);

		// Use the key derivation function PBKDF2 to derive bits that will 
		// be used to create the cryptoKey object needed for the main digest.
		const derived_bits = await window.crypto.subtle.deriveBits(
			{
				name: "PBKDF2",
				salt,
				iterations: iter,
				hash: digest_hash,
			},
			keyMaterial,
			384,
		);
		const derivedKeyBuffer = new Uint8Array(derived_bits);

		// OpenSSL derives the key and IV using the same PBKDF2 digest.
		// The first 256 bits are used as key, the last 128 are used for IV.
		const keybytes = derivedKeyBuffer.slice(0, 32);
		const ivbytes = derivedKeyBuffer.slice(32);

		// Extract the encrypted phrase from OpenSSL input
		const cipherbytesphrase = ciphertextbytes.slice(16);

		// MDN syntax: importKey(format, keyData, algorithm, extractable, keyUsages)
		let key = await window.crypto.subtle.importKey(
			'raw', 
			keybytes, 
			{
				name: 'AES-CBC', 
				length: 256
			}, 
			false, 
			['decrypt']
		);

		// Main Function Call
		const decrypted_result = await window.crypto.subtle.decrypt({ name: "AES-CBC", iv: ivbytes }, key, cipherbytesphrase);

		plaintextbytes = new Uint8Array(decrypted_result);
		let decrypted_string = new TextDecoder().decode( plaintextbytes );
		// Pop single newline added in enc in order to output the same encrypted data as openssl command line.
		decrypted_string = decrypted_string.substring(0, decrypted_string.length - 1);
		return decrypted_string;
	}//decOpenSSL()

	async function getXOR(plaintext_binary, password){
		// 1000 seems more reasonable if we're immediately going to chop it to 780.
		const array_length = 1000;
		// Prepare password side for XOR.
		const pass_binary = await getPassHash(password, array_length);

		// Perform the XOR bytewise in a loop.
		let xor_result = new Array();
		// XOR is a ^ in javascript
		for (let i = 0; i < array_length; i++) {
			xor_result.push(pass_binary[i] ^ plaintext_binary[i]);
		}

		// Now that we have plenty of XOR'd binary data,
		// we need to pop the number of bytes that will encode to exactly 1000 chars of base58 data.
		let array_slice = xor_result.slice(0, 780);
		let last_byte_popped;
		let array_slice_hex;
		let result_b58 = to_b58(array_slice);
		// Start by popping whole bytes, then check if we encoded to 1000 exactly.
		while( result_b58.length > 1000 ){
			last_byte_popped = array_slice.pop();
			result_b58 = to_b58(array_slice);
		}
		// If we don't encode to 1000 popping 8-bit bytes, try popping 4-bit words!
		if( result_b58.length != 1000 ){
			console.log("1000 char output missed. ADD MORE PRECISION!");
			// Start by pushing back on the last popped byte.
			array_slice.push(last_byte_popped);
			// Convert to word array.
			word_array = bytesToWords( array_slice );
			// We have 4 words that are poppable.
			let tries = 0;
			while( result_b58.length != 1000){
				console.log("word_array: " + word_array);
				last_word_popped = word_array.pop();
				result_b58 = to_b58_words(word_array);
				console.log("b58 length: " + result_b58.length);
				console.log("result_b58: " + result_b58);
				tries++;
				// Not sure how to test this as it may never trigger.
				if( tries > 4 ){
					throw new Error('MAJOR ERROR: additional precision not sufficient to reach 1000 characters of length. Ending.');
				}
			}
		}	

		console.log("RESULT: " + result_b58);
		console.log("Data LENGTH: " + result_b58.length);
		return result_b58;
	}//getXOR()

	async function obf1Encrypt(plaintext, password) {

		// Prepare plaintext side for XOR.
		let plaintext_binary = addCountstring(plaintext);

		// XOR plaintext with password and return exactly 1000 base 58 chars.
		const result_b58 = await getXOR(plaintext_binary, password);

		// Check data length and type (check 2: 1000 char length, base 58).
		//addStatus('Running Check 2...\n');
		// If all b58 chars...
		if( check_b58chars(result_b58) ){
			//addStatus("Data type verified.\n");
		}else{
			//addStatus("Data type INVALID.\n");
			//addStatus("Critical Failure! End.\n");
			throw new Error('Obfuscation step 1 INVALID characters found!');
			//return;
		}

		if( result_b58.length == 1000 ){ 
			//addStatus("Data length verified.\n");
		}else{
			//addStatus("Data length INVALID. Length: " + result_b58.length + "\n");
			//addStatus("Critical Failure! End.\n");
			throw new Error('Obfuscation step 1 output length INVALID!');
			//return;
		}

		return result_b58;
	}//obf1Encrypt()

	async function obf1Decrypt(compd_val, password) {

		// Convert from base 58.
		let decoded_b58_arr = from_b58(compd_val);

		//const array_length = 732;
		let array_length = decoded_b58_arr.length;

		// Compute password for XOR.
		let pass_binary = await getPassHash(password, array_length);

		// Perform the bitwise XOR sequentially.
		// Inverse of XOR is XOR and is communicative.
		// XOR password and output to get input.
		let xor_result = new Uint8Array(array_length);
		for (let i = 0; i < array_length; i++) {
			xor_result[i] = pass_binary[i] ^ decoded_b58_arr[i];
		}

		let plaintextbytes = Array.from(xor_result);
		// Strip off tailing zeros.
		while(plaintextbytes[plaintextbytes.length - 1] == 0){
			plaintextbytes.pop();
		}
		plaintextbytes = Uint8Array.from(plaintextbytes);
		// utf8 to text
		let decrypted_string = new TextDecoder().decode(plaintextbytes);

		// data should now be in countstring form.

		// use regex to see if decrypted_string looks like the countstring. 
		// remove lead char (hopefully a 0) if not.
		const regex = /^\d+:/;
		if( !regex.test(decrypted_string) ){
			console.log("NO MATCH: try stripping zero");
			// Try stripping zero from function input and running the obf1 decrypt again.
			try_stripped = compd_val.substr(1);
			// Convert from base 58.
			decoded_b58_arr = from_b58(try_stripped);
			array_length = decoded_b58_arr.length;
			// Compute password for XOR.
			pass_binary = await getPassHash(password, array_length);
			xor_result = new Uint8Array(array_length);
			for (let i = 0; i < array_length; i++) {
				xor_result[i] = pass_binary[i] ^ decoded_b58_arr[i];
			}

			plaintextbytes = Array.from(xor_result);
			// Strip off tailing zeros.
			while(plaintextbytes[plaintextbytes.length - 1] == 0){
				plaintextbytes.pop();
			}
			plaintextbytes = Uint8Array.from(plaintextbytes);
			decrypted_string = new TextDecoder().decode(plaintextbytes);
			
			// Make sure this fixed it.
			if( !regex.test(decrypted_string) ){
				//addStatus("DECRYPT RETRY FAILED!\n");
				//addLoadStatus("DECRYPT RETRY FAILED!\n");
				throw new Error('DECRYPT RETRY FAILED!');
			}
		}

		// Decode countstring
		decrypted_string = decrypted_string.split(":").pop();

		return decrypted_string;
	}//obf1Decrypt


	async function obf2Encrypt(input_data, password){

		// Check input data for non-b58 chars
		if( !check_b58chars(input_data) ){
			console.log("Non-base 58 chars found in the Final Step input! \n\n Second check; WARNING! This should never trigger!!!");
			// Abort final step encode.
			return;
		}

		// Get size of input data (should be 1000)
		const input_length = input_data.length;

		// Get hash+append of password, to length of input.
		const pass_hash = await getPassHash(password, input_length);

		// Convert password hash to base58
		const pass_b58 = to_b58(pass_hash);

		// Convert to b58 numerical equivalent 
		let input_b58_num_arr = new Array(input_length);
		let pass_b58_num_arr = new Array(input_length);
		for (let i = 0; i < input_length; i++) {
			input_b58_num_arr[i] = base58map.indexOf(input_data.charAt(i));
			pass_b58_num_arr[i] = base58map.indexOf(pass_b58.charAt(i));
		}

		// Add the arrays piecewise, 
		let sum_b58_num_arr = new Array(input_length);
		for (let i = 0; i < input_length; i++) {
			sum_b58_num_arr[i] = input_b58_num_arr[i] + pass_b58_num_arr[i];
		}

		// modulo 57, then store to new array.
		for (let i = 0; i < input_length; i++) {
			sum_b58_num_arr[i] = sum_b58_num_arr[i] % 58;
		}

		// Convert numerical values to b58 chars.
		let final_encrypted_string = '';
		for (let i = 0; i < input_length; i++) {
			final_encrypted_string += base58map.charAt(sum_b58_num_arr[i]);
		}

		return final_encrypted_string;
	}//obf2Encrypt()

	async function obf2Decrypt(final_encrypted, password){

		// Get size of input data
		const final_encrypted_length = final_encrypted.length;

		// Get hash+append of password, to length of final_encrypted for now. 
		const pass_hash = await getPassHash(password, final_encrypted_length);

		// Convert password hash to base58
		const pass_b58 = to_b58(pass_hash);

		// Convert to b58 numerical equivalent 
		let final_encrypted_b58_num_arr = new Array(final_encrypted_length);
		let pass_b58_num_arr = new Array(final_encrypted_length);
		for (let i = 0; i < final_encrypted_length; i++) {
			final_encrypted_b58_num_arr[i] = base58map.indexOf(final_encrypted.charAt(i));
			pass_b58_num_arr[i] = base58map.indexOf(pass_b58.charAt(i));
		}

		// Run the sum-and-58-modulo inverse function
		let in_b58_num_arr = new Array(final_encrypted_length);
		for (let i = 0; i < final_encrypted_length; i++) {
			if( final_encrypted_b58_num_arr[i] - pass_b58_num_arr[i] < 0 ){
				final_encrypted_b58_num_arr[i] += 58;
			}
			in_b58_num_arr[i] = final_encrypted_b58_num_arr[i] - pass_b58_num_arr[i];
		}

		// Convert numerical values to b58 chars.
		let final_decrypted_string = '';
		for (let i = 0; i < final_encrypted_length; i++) {
			final_decrypted_string += base58map.charAt(in_b58_num_arr[i]);
		}

		return final_decrypted_string;
	}//obf2Decrypt()

	function check_b58chars(input){
		// From the first char(^) to the last($), match zero or more(*) of 
		// 1-9A-HJ-NP-Za-km-z (false if any non-b58 chars).
		const regex = /^[1-9A-HJ-NP-Za-km-z]*$/;
		if( regex.test(input) ){
			// Return true/valid: non-b58 chars were NOT found.
			return 1;
		}else{
			// Return false/invalid: non-b58 chars were found.
			return 0;
		}
	}//check_b58chars()

	function checkInputLength(input){
		//let input = document.getElementById("plaintext_input").value;

		// show input size in bytes
		let size = new Blob([input]).size;
		console.log("BLOB SIZE: " + size);
		//console.log("byte size: " + size);
		//if( input.length > 500 ){
		if( size > 700 ){
			//document.getElementById("input_warning").innerHTML= 'INPUT BYTE LENGTHS OVER 500 ARE INVALID. CURRENT LENGTH: ' + size;
			//document.getElementById("input_warning").style.display = 'inline';
			//document.getElementById("encrypt_openssl_button").disabled = true;
			//document.getElementById("store_button").disabled = true;
			return 0; // Length Check Failed
		}else{
			////document.getElementById("input_warning").style.display = 'none';
			//document.getElementById("encrypt_openssl_button").disabled = false;
			//document.getElementById("store_button").disabled = false;
			return 1; // Length Check Passed
		}
	}//checkInputLength()

/*
	// NOT USED
	function check_input_obf2(){
		let input = document.getElementById("obf2_input").value;
		// Disable Final Step button if any non-base58 characters are entered.
		if( check_b58chars(input) ){
			//console.log("enable");
			//enable button
			document.getElementById("obf2Encrypt_button").disabled = false;
			//document.getElementById("obf2_encrypt_output").value = "";
		}else{
			//console.log("Non-base 58 chars found in the Final Step input!");
			//disable button
			document.getElementById("obf2Encrypt_button").disabled = true;
			//document.getElementById("obf2_encrypt_output").value = "Non-base 58 chars found in the Final Step input!";
		}

		if( input.length == 1000 ){
			//document.getElementById("obf2Encrypt_button").disabled = false;
			console.log("Obf2 input size verified as valid (exactly 1000 chars)");
		}else{
			//document.getElementById("obf2Encrypt_button").disabled = true;
			console.log("Obf2 input size INVALID!");
		}
	}//check_input_obf2()
*/


	function addCountstring(data) {
		// Count chars.
		const num_chars = data.length;
		// Form 'countstring'.
		let countstring = num_chars + ':' + data;
		// Convert to binary (Uint8Array).
		const countstring_binary = new TextEncoder().encode(countstring);
		// Copy to size 1000 array for XOR.
		let big_arr = new Uint8Array(1000);
		big_arr.set(countstring_binary);
		return big_arr;
	}//addCountstring()

	async function getPassHash(pass, length) {
		//console.log("entered password: " + pass);
		// Convert to binary (Uint8Array).
		const password_binary = new TextEncoder().encode(pass);
		//console.log("password binary array: " + password_binary);

		// Take initial SHA256.
		let initial_sha = await crypto.subtle.digest('SHA-256', password_binary);
		let sha_cumulative = initial_sha;
		let	sha_result;

		// Loop until we have 2000 bytes of data.
		do{
			sha_result = await crypto.subtle.digest('SHA-256', sha_cumulative);
			// Append SHA256 of Hash(n-1)
			sha_cumulative = concatBuffer(sha_cumulative, sha_result);
			sha_cumulative = new Uint8Array(sha_cumulative);
			//console.log("sha_cumulative: " + sha_cumulative);
		} while( sha_cumulative.length < length);
		//console.log("sha_cumulative: " + sha_cumulative);

		// Truncate array to size <length>
		sha_cumulative = sha_cumulative.slice(0, length);

		return sha_cumulative;
	}//getPassHash()

	// Outputs data in a typed array.
	function concatBuffer(buffer1, buffer2) {
	  var tmp = new Uint8Array(buffer1.byteLength + buffer2.byteLength);
	  tmp.set(new Uint8Array(buffer1), 0);
	  tmp.set(new Uint8Array(buffer2), buffer1.byteLength);
	  return tmp.buffer;
	}//concatBuffer()


	// MDN funcction Usage:
	// bytesToBase64(new TextEncoder().encode("a Ā 𐀀 文 🦄")); // "YSDEgCDwkICAIOaWhyDwn6aE"
	// new TextDecoder().decode(base64ToBytes("YSDEgCDwkICAIOaWhyDwn6aE")); // "a Ā 𐀀 文 🦄"

	// MDN function
	function base64ToBytes(base64) {
		const binString = atob(base64);
		return Uint8Array.from(binString, (m) => m.codePointAt(0));
	}

	// MDN function
	function bytesToBase64(bytes) {
		const binString = Array.from(bytes, (byte) =>
			String.fromCodePoint(byte),
		).join("");
		return btoa(binString);
	}

	function _arrayBufferToBase64( buffer ) {
		var binary = '';
		var bytes = new Uint8Array( buffer );
		var len = bytes.byteLength;
		for (var i = 0; i < len; i++) {
			binary += String.fromCharCode( bytes[ i ] );
		}
		return window.btoa( binary );
	}//_arrayBufferToBase64()

	function buf2hex(buffer) { // buffer is an ArrayBuffer
		return [...new Uint8Array(buffer)]
			.map(x => x.toString(16).padStart(2, '0'))
			.join('');
	}//buf2hex()
	 // This function converts a hex string into an ArrayBuffer for hash processing.
	function hex2buf(hexString){
		// convert to a number array representing the hex bytes.
		const hexBytesArray = new Array;
		for(var i=0; i < hexString.length; i+=2){
			hexBytesArray.push(parseInt(hexString.substring(i, i+2), 16));
		}
		const hexArrayBuffer = new Uint8Array(hexBytesArray);
		return hexArrayBuffer;
	}//hex2buf()

	function base64ToArrayBuffer(base64) {
		var binaryString = atob(base64);
		var bytes = new Uint8Array(binaryString.length);
		for (var i = 0; i < binaryString.length; i++) {
			bytes[i] = binaryString.charCodeAt(i);
		}
		return bytes.buffer;
	}//base64ToArrayBuffer()
/*
	function encode64(){
		let raw_text = document.getElementById("raw_64encode_text").value;
		//console.log("Encoding the string: '" + raw_text + "'");
		const encoded64 = btoa(raw_text);
		//console.log("Encoded string: '" + encoded64 + "'");
		document.getElementById("encoded64_text").value = encoded64;
		document.getElementById("raw_64encoded_text").value = encoded64;
	}//encode64()

	function decode64(){
		let decoded_text = document.getElementById("raw_64encoded_text").value;
		//console.log("Decoding the string: '" + decoded_text + "'");
		const decoded64 = atob(decoded_text);
		//console.log("Decoded string: '" + decoded64 + "'");
		document.getElementById("decoded64_text").value = decoded64;
	}//decode64()
*/

////////////////////////////////////////////
//////		End Merge	 	////////////////
////////////////////////////////////////////

</script>

</body>

</html>
